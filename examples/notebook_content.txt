{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AIPitBoss: OpenAI API Integration Tutorial\n",
    "\n",
    "This notebook demonstrates how to:\n",
    "1. Obtain an OpenAI API key\n",
    "2. Configure AIPitBoss to use your API key\n",
    "3. Create a simple question-answering application using AIPitBoss and OpenAI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Getting an OpenAI API Key\n",
    "\n",
    "To use OpenAI's API with AIPitBoss, you need an API key. Here's how to get one:\n",
    "\n",
    "1. **Create an OpenAI account**: Go to [OpenAI's website](https://openai.com/) and sign up for an account if you don't already have one.\n",
    "\n",
    "2. **Navigate to the API section**: After logging in, go to the [API keys page](https://platform.openai.com/api-keys).\n",
    "\n",
    "3. **Create a new API key**: Click on \"Create new secret key\" and give it a name (e.g., \"AIPitBoss Integration\").\n",
    "\n",
    "4. **Save your API key**: OpenAI will show you the API key once. Copy it and store it securely as you won't be able to see it again.\n",
    "\n",
    "5. **Set up billing**: Make sure you have billing set up in your OpenAI account to use the API.\n",
    "\n",
    "![OpenAI API Key Page](https://platform.openai.com/docs/images/api-keys-page.webp)\n",
    "\n",
    "**Important**: Your API key is a secret. Never share it publicly or commit it to a public repository."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Configuring AIPitBoss with Your API Key\n",
    "\n",
    "AIPitBoss offers three ways to provide your API key:\n",
    "\n",
    "1. **Directly in code** (not recommended for production)\n",
    "2. **Using environment variables**\n",
    "3. **Using a .keys.json file** (recommended for development)\n",
    "\n",
    "Let's explore each method:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 1: Direct API Key (For Testing Only)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import AIPitBoss\n",
    "from aipitboss import OpenAIService\n",
    "\n",
    "# Initialize with direct API key (not recommended for shared or production code)\n",
    "# openai = OpenAIService(api_key='your-api-key-here')\n",
    "\n",
    "# Note: We're not executing this code as it's not the recommended approach"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 2: Using Environment Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from aipitboss import OpenAIService\n",
    "\n",
    "# Set environment variable (in a real environment, you'd set this in your system)\n",
    "# os.environ[\"OPENAI_API_KEY\"] = \"your-api-key-here\"\n",
    "\n",
    "# Initialize service using environment variable\n",
    "# openai = OpenAIService(use_env=True)\n",
    "\n",
    "# Check if the environment variable is already set\n",
    "if \"OPENAI_API_KEY\" in os.environ:\n",
    "    print(\"OPENAI_API_KEY environment variable is set\")\n",
    "else:\n",
    "    print(\"OPENAI_API_KEY environment variable is not set\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 3: Using a Keys File (Recommended for Development)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import os\n",
    "from pathlib import Path\n",
    "from aipitboss import KeyManager\n",
    "\n",
    "# Check for keys file in current directory and parent directory\n",
    "current_dir_keys = \".keys.json\"\n",
    "parent_dir_keys = \"../.keys.json\"\n",
    "\n",
    "# First check current directory\n",
    "if Path(current_dir_keys).exists():\n",
    "    keys_file = current_dir_keys\n",
    "    print(f\"Keys file exists in current directory at {Path(keys_file).absolute()}\")\n",
    "# Then check parent directory\n",
    "elif Path(parent_dir_keys).exists():\n",
    "    keys_file = parent_dir_keys\n",
    "    print(f\"Keys file exists in parent directory at {Path(keys_file).absolute()}\")\n",
    "else:\n",
    "    keys_file = current_dir_keys  # Default to current directory for creation\n",
    "    print(\"Keys file doesn't exist in current or parent directory.\")\n",
    "    print(f\"Would create at: {Path(keys_file).absolute()}\")\n",
    "\n",
    "# If keys file was found, load and display available services\n",
    "if Path(keys_file).exists():\n",
    "    with open(keys_file, 'r') as f:\n",
    "        keys = json.load(f)\n",
    "    print(f\"Available keys for services: {list(keys.keys())}\")\n",
    "    \n",
    "    # Demonstration of how to create a keys file (commented out)\n",
    "    # KeyManager.save_keys({'openai': 'your-api-key-here'}, keys_file)\n",
    "    # print(f\"Keys file updated at {Path(keys_file).absolute()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Using AIPitBoss to Interact with OpenAI\n",
    "\n",
    "Now that we have our API key configured, let's use AIPitBoss to interact with OpenAI's API:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aipitboss import OpenAIService\n",
    "\n",
    "# Initialize OpenAI service (will check multiple locations)\n",
    "# This will automatically check .keys.json, ../.keys.json, and environment variables\n",
    "openai = OpenAIService()\n",
    "\n",
    "# Print confirmation (without revealing the actual key)\n",
    "if openai.api_key:\n",
    "    print(\"✓ Successfully initialized OpenAI service with API key\")\n",
    "    print(f\"  API key starts with: {openai.api_key[:8]}...\")\n",
    "else:\n",
    "    print(\"✗ Failed to initialize OpenAI service with API key\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a Simple Question-Answering Application\n",
    "\n",
    "Let's create a simple function to ask questions to OpenAI's models using our AIPitBoss integration:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ask_question(question, model=\"gpt-3.5-turbo\"):\n",
    "    \"\"\"Ask a question to OpenAI and get the response.\"\"\"\n",
    "    # Prepare the messages\n",
    "    messages = [\n",
    "        {\"role\": \"system\", \"content\": \"You are a helpful, concise assistant.\"},\n",
    "        {\"role\": \"user\", \"content\": question}\n",
    "    ]\n",
    "    \n",
    "    # Make the API call\n",
    "    response = openai.chat_completion(\n",
    "        messages=messages,\n",
    "        model=model,\n",
    "        temperature=0.7,\n",
    "        max_tokens=150\n",
    "    )\n",
    "    \n",
    "    # Extract the answer text\n",
    "    answer = response[\"choices\"][0][\"message\"][\"content\"]\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's try asking some questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ask a question\n",
    "question = \"What is artificial intelligence in simple terms?\"\n",
    "print(f\"Question: {question}\")\n",
    "print(\"\\nAnswer:\")\n",
    "answer = ask_question(question)\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ask another question\n",
    "question = \"What are the three main types of machine learning?\"\n",
    "print(f\"Question: {question}\")\n",
    "print(\"\\nAnswer:\")\n",
    "answer = ask_question(question)\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interactive Question Answering\n",
    "\n",
    "Let's create a simple interactive interface to ask questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ipywidgets import widgets\n",
    "from IPython.display import display, clear_output\n",
    "\n",
    "# Create the input widgets\n",
    "question_input = widgets.Text(\n",
    "    value='',\n",
    "    placeholder='Type your question here...',\n",
    "    description='Question:',\n",
    "    disabled=False,\n",
    "    layout=widgets.Layout(width='80%')\n",
    ")\n",
    "\n",
    "model_dropdown = widgets.Dropdown(\n",
    "    options=['gpt-3.5-turbo', 'gpt-4', 'gpt-4-turbo'],\n",
    "    value='gpt-3.5-turbo',\n",
    "    description='Model:',\n",
    "    disabled=False,\n",
    ")\n",
    "\n",
    "submit_button = widgets.Button(\n",
    "    description='Ask',\n",
    "    disabled=False,\n",
    "    button_style='primary',\n",
    "    tooltip='Submit your question',\n",
    "    icon='question'\n",
    ")\n",
    "\n",
    "output_area = widgets.Output()\n",
    "\n",
    "# Define the callback function for the button click\n",
    "def on_submit_button_clicked(b):\n",
    "    question = question_input.value\n",
    "    model = model_dropdown.value\n",
    "    \n",
    "    if not question.strip():\n",
    "        return\n",
    "    \n",
    "    with output_area:\n",
    "        clear_output()\n",
    "        print(f\"Question: {question}\")\n",
    "        print(f\"Model: {model}\")\n",
    "        print(\"\\nThinking...\\n\")\n",
    "        \n",
    "        try:\n",
    "            answer = ask_question(question, model)\n",
    "            clear_output()\n",
    "            print(f\"Question: {question}\")\n",
    "            print(f\"Model: {model}\")\n",
    "            print(\"\\nAnswer:\")\n",
    "            print(answer)\n",
    "        except Exception as e:\n",
    "            clear_output()\n",
    "            print(f\"Error: {e}\")\n",
    "    \n",
    "    # Clear the input field for the next question\n",
    "    question_input.value = ''\n",
    "\n",
    "# Connect the callback to the button\n",
    "submit_button.on_click(on_submit_button_clicked)\n",
    "\n",
    "# Display the widgets\n",
    "display(widgets.HBox([question_input, model_dropdown, submit_button]))\n",
    "display(output_area)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Streaming Responses (Advanced)\n",
    "\n",
    "For a better user experience, we can stream the responses as they are generated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from aipitboss.streaming import StreamProcessor\n",
    "\n",
    "def stream_question(question, model=\"gpt-3.5-turbo\"):\n",
    "    \"\"\"Stream a question to OpenAI and get the response character by character.\"\"\"\n",
    "    # Prepare the request data\n",
    "    url = \"https://api.openai.com/v1/chat/completions\"\n",
    "    headers = {\n",
    "        \"Authorization\": f\"Bearer {openai.api_key}\",\n",
    "        \"Content-Type\": \"application/json\"\n",
    "    }\n",
    "    data = {\n",
    "        \"model\": model,\n",
    "        \"messages\": [\n",
    "            {\"role\": \"system\", \"content\": \"You are a helpful, concise assistant.\"},\n",
    "            {\"role\": \"user\", \"content\": question}\n",
    "        ],\n",
    "        \"temperature\": 0.7,\n",
    "        \"stream\": True  # Enable streaming\n",
    "    }\n",
    "    \n",
    "    # Make the streaming request\n",
    "    response = requests.post(url, json=data, headers=headers, stream=True)\n",
    "    response.raise_for_status()\n",
    "    \n",
    "    # Process the stream and return the full content\n",
    "    return StreamProcessor.process_openai_stream(\n",
    "        response.iter_lines(),\n",
    "        chunk_handler=StreamProcessor.print_stream\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Try the streaming function\n",
    "question = \"Explain quantum computing in simple terms.\"\n",
    "print(f\"Question: {question}\\n\")\n",
    "print(\"Answer (streaming):\")\n",
    "full_response = stream_question(question)\n",
    "print(\"\\n\\nDone!\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
} 